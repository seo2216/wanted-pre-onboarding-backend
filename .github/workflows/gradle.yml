# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # (1) 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v3

    # (2) JDK 11 셋팅
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    # (3) application.properties 수정
    - name: Modify application.properties
      run: |
        sed -i "s|spring.profiles.active=local|spring.profiles.active=dev|" ./src/main/resources/application.properties
    # application-dev.properties 수정
    - name: Modify application-dev.properties
        sed -i "s|spring.datasource.password=|spring.datasource.password=${{ secrets.AWS_password }}|"./src/main/resources/application-dev.properties
        
    # (4) Gradle Build (test 제외)
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
#       uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
#       with:
#         arguments: build
      run: ./gradlew clean build --exclude-task test
    
    # (5) 압축 파일 형태로 전달
    - name: Make Zip File
      run: zip -qq -r ./$GITHUB_SHA.zip .
      shell: bash
      
    # (6) AWS 인증
    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_PRIVATE_ACCESS_KEY }}
    #     aws-region: ap-northeast-2
    
    # (7) EC2 배포
    # - name: Code Deploy To EC2 instance
    #   run: aws deploy create-deployment 
    #             --application-name ${{env.CODE_DEPLOY_APP_NAME}} 
    #             --deployment-config-name CodeDeployDefault.AllAtOnce 
    #             --deployment-group-name ${{env.DEPLOYMENT_GROUP_NAME}}  
    #             --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip       
